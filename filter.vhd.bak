library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-- High Pass Filter Mask
-- -1 -1 -1
-- -1  8 -1
-- -1 -1 -1

-- Mask's Positions
--  1  2  3
--  4  5  6
--  7  8  9

entity filter is
  port (
    -- RGB input
    r_in_filter1 : in std_logic_vector(7 downto 0);
    r_in_filter2 : in std_logic_vector(7 downto 0);
    r_in_filter3 : in std_logic_vector(7 downto 0);
    r_in_filter4 : in std_logic_vector(7 downto 0);
    r_in_filter5 : in std_logic_vector(7 downto 0);
    r_in_filter6 : in std_logic_vector(7 downto 0);
    r_in_filter7 : in std_logic_vector(7 downto 0);
    r_in_filter8 : in std_logic_vector(7 downto 0);
    r_in_filter9 : in std_logic_vector(7 downto 0);

    -- RGB output
    r_out_filter : out std_logic_vector(7 downto 0);
    g_out_filter : out std_logic_vector(7 downto 0);
    b_out_filter : out std_logic_vector(7 downto 0)
  );
end filter; 

architecture rtl of filter is

  signal final      : std_logic_vector(7 downto 0);

  signal r_weighted : unsigned(7 downto 0);
  signal g_weighted : unsigned(7 downto 0);
  signal b_weighted : unsigned(7 downto 0);

begin

  r_out_filter <= std_logic_vector(final);
  g_out_filter <= std_logic_vector(final);
  b_out_filter <= std_logic_vector(final);

  r_weighted <= unsigned("00" & r_in_filter1(7 downto 2));
  g_weighted <= unsigned("0" & g_in_filter1(7 downto 1));
  b_weighted <= unsigned("0000" & b_in_filter1(7 downto 4));

  final <= std_logic_vector(r_weighted + g_weighted + b_weighted);

end architecture;